import json
import logging
import os
import sys

import colorlog
import requests
from environs import Env
from fake_useragent import UserAgent

exe_file = sys.executable
exe_parent = os.path.dirname(exe_file)
exe_path = os.path.join(exe_parent, 'check.exe')
txt_path = os.path.join(exe_parent, 'check.txt')
env_path = os.path.join(exe_parent, '.env')
bat_path_create = os.path.join(exe_parent, 'create_task.bat')
bat_path_delete = os.path.join(exe_parent, 'delete_task.bat')

handler = colorlog.StreamHandler()
handler.setFormatter(colorlog.ColoredFormatter('%(log_color)s%(levelname)-8s%(reset)s %(message)s'))

logger = colorlog.getLogger()
logger.addHandler(handler)
logger.setLevel(logging.INFO)

ua = UserAgent()
HEADERS = {'user-agent': ua.chrome}

env = Env()
env.read_env(env_path)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
LAST_PERCENT_FILE = txt_path

# –í–∞—à —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –≤ Telegram
API_TOKEN: str = env.str('BOT_TOKEN')
CHAT_ID: int = env.int('CHAT_ID')

MID_ENDPOINT: str = env.str('MID_ENDPOINT')
ID_REQUEST: str = env.str('ID_REQUEST')


def create_scheduled_task_bats(exe_path, create_bat_path, delete_bat_path, env_path):
    """–°–æ–∑–¥–∞–µ—Ç BAT-—Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Windows.

    Args:
        exe_path (str): –ü—É—Ç—å –¥–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
        create_bat_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BAT-—Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏.
        delete_bat_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BAT-—Ñ–∞–π–ª–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á.
        env_path (str): –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    if not os.path.exists(env_path):
        logger.critical('!!! –ù–ï –ù–ê–ô–î–ï–ù –§–ê–ô–õ .env !!!')
        logger.critical('1. –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ .env.dict –≤ .env')
        logger.critical('2. –æ—Ç–∫—Ä–æ–π—Ç–µ .env –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–ª–æ–∫–Ω–æ—Ç–∞')
        logger.critical('3. –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ')
        logger.critical('4. –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É')
        input('–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...')
        sys.exit(1)  # –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∫–æ–¥–æ–º 1

    tasks = {
        'create': {
            'path': create_bat_path,
            'content': f""":: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Ç—Ä–æ–º –≤ 5:00
schtasks /create /tn "MidCheckPassMorningTask" /tr "{exe_path}" /sc daily /st 09:00

:: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ—á–µ—Ä–æ–º –≤ 17:00
schtasks /create /tn "MidCheckPassEveningTask" /tr "{exe_path}" /sc daily /st 21:00

pause"""
        },
        'delete': {
            'path': delete_bat_path,
            'content': """:: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
schtasks /delete /tn "MidCheckPassMorningTask" /f
schtasks /delete /tn "MidCheckPassEveningTask" /f

pause"""
        }
    }

    for task_type, task_info in tasks.items():
        if os.path.exists(task_info['path']):
            logger.info(f'–§–∞–π–ª {task_info["path"]} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...')
            continue
        with open(task_info['path'], "w") as f:
            f.write(task_info['content'])
            logger.info(f'–§–∞–π–ª {task_info["path"]} –±—ã–ª —Å–æ–∑–¥–∞–Ω')


def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.

    Args:
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    url = f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={CHAT_ID}&text={message}&parse_mode=HTML'
    try:
        requests.get(url, headers=HEADERS)
        logger.info(f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {CHAT_ID}')
    except requests.exceptions.ConnectionError:
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º Telegram')
    except requests.exceptions.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞: {e}')


def check_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
    url = MID_ENDPOINT + ID_REQUEST
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
    except (requests.RequestException, json.JSONDecodeError) as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}')
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
    uid = data['uid']
    reception_date = data['receptionDate']
    passport_status = data['passportStatus']['name']
    description = data['passportStatus']['description']
    internal_status = data['internalStatus']['name']
    percent = data['internalStatus']['percent']

    # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(LAST_PERCENT_FILE, "r") as f:
            last_percent_str = f.read().strip()
            if not last_percent_str:
                logging.info('–§–∞–π–ª –ø—É—Å—Ç–æ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ -1')
                last_percent = -1
            else:
                last_percent = int(last_percent_str)
    except (FileNotFoundError, ValueError):
        logging.info(f'–§–∞–π–ª {txt_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª')
        last_percent = -1

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    if percent != last_percent:
        logger.warning(f'–ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–µ–ø–µ—Ä—å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {percent}%')
        message = (
            f'üìë <b>–ó–∞—è–≤–ª–µ–Ω–∏–µ</b>: ‚Ññ<a href="https://info.midpass.ru/?id={uid}">{uid}</a>\n'
            f'üìÜ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏</b>: {reception_date}\n'
            f'üîç <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</b>: {passport_status}\n'
            f'üîí <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—Ç–∞—Ç—É—Å</b>: {internal_status}\n'
            f'üîã <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</b>: {percent}%'
        )
        if description:
            message = message + f'\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {description}'
        send_telegram_message(message)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª–µ
        with open(LAST_PERCENT_FILE, "w") as f:
            f.write(str(percent))
        logger.info(f'–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ {LAST_PERCENT_FILE}')
    else:
        logger.info(f'–ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {percent}%')
    logger.info('–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω')


if __name__ == "__main__":
    create_scheduled_task_bats(exe_path, bat_path_create, bat_path_delete, env_path)
    check_status()
